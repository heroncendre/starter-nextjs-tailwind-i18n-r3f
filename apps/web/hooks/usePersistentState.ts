/**
 * Hook personnalis√© pour g√©rer un √©tat local persistant dans le localStorage.
 *
 * üìå Objectif :
 * Permettre √† n‚Äôimporte quel composant React de conserver un √©tat entre les rechargements,
 * sans d√©pendre d‚Äôun store global comme Zustand.
 *
 * ‚úÖ Use cases typiques :
 * - M√©moriser un choix d'utilisateur dans un composant (onglet actif, banni√®re ferm√©e‚Ä¶)
 * - G√©rer un √©tat isol√© r√©utilisable (ex. onboarding step)
 * - Prototyper ou isoler un comportement sans polluer le store global
 * - Utilisable dans des biblioth√®ques partag√©es ind√©pendamment de Zustand
 *
 * ‚ö†Ô∏è √Ä √©viter :
 * - Pour des √©tats globaux transversaux ‚Üí privil√©gier Zustand
 * - Pour des donn√©es sensibles (non chiffr√©es)
 *
 * Exemple :
 * const [value, setValue] = usePersistentState('onboarding-step', 1)
 */

import { useEffect, useState } from 'react'

export function usePersistentState<T>(key: string, defaultValue: T) {
    const [value, setValue] = useState<T>(() => {
        if (typeof window === 'undefined') return defaultValue
        try {
            const stored = localStorage.getItem(key)
            return stored ? JSON.parse(stored) as T : defaultValue
        } catch {
            return defaultValue
        }
    })

    useEffect(() => {
        try {
            localStorage.setItem(key, JSON.stringify(value))
        } catch {}
    }, [key, value])

    return [value, setValue] as const
}
